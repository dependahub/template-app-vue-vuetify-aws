import fs from 'node:fs/promises';
import {getCodeComment} from './actions/get-code-comment.js';
import {kekabToCamel} from './utils/text-transform.js';
import {rootPath, apiPath, sdkPath} from '../../config.js';

// ▼▼▼ カスタマイズ項目 ▼▼▼
const actionsPath = `${apiPath}/src/actions`;
const sdkApiPath = `${sdkPath}/utils/api`;
const notice = `
/**
 * !! DO NOT EDIT THIS FILE MANUALLY !!
 * このコードは scripts/make-sdk/index.js によって自動生成されています。
 */
`.trim();
// ▲▲▲ カスタマイズ項目 ▲▲▲

console.info('\nGenerating action files...\n');

await fs.rm(sdkApiPath, {recursive: true, force: true});
await fs.mkdir(sdkApiPath, {recursive: true});

const actionPathes = await Promise.all(['auth', 'unauth'].map(async authority => {
	await fs.mkdir(`${sdkApiPath}/${authority}`, {recursive: true});
	const dirrents = await fs.readdir(`${actionsPath}/${authority}`, {
		withFileTypes: true,
		recursive: false,
	});
	return dirrents
		.filter(dirent => dirent.isDirectory())
		.map(({parentPath, name}) => parentPath.replace(actionsPath, '') + `/${name}`);
})).then(arrays => arrays.flat());

for (const actionPath of actionPathes) {
	const [authority, actionName] = actionPath.split('/').filter(Boolean);

	// ▼▼▼ カスタマイズ項目 ▼▼▼
	const codePath = `${actionsPath}/${actionPath}/index.js`;
	const apiName = authority === 'auth' ? 'AuthApi' : 'UnauthApi';
	// ▲▲▲ カスタマイズ項目 ▲▲▲

	const code = await fs.readFile(codePath, 'utf8'); // eslint-disable-line no-await-in-loop
	const comment = getCodeComment(code);
	const functionName = kekabToCamel(actionName);
	const sdkCode = `
${notice}

import * as API from 'aws-amplify/api';

${comment}
export async function ${functionName}(input) {
	const {body} = await API.post({
		apiName: '${apiName}',
		path: '/${actionName}',
		options: {
			body: input,
		},
	}).response;
	return body.json();
}
`.trimStart();

	await fs.writeFile(`${sdkApiPath}/${actionPath}.js`, sdkCode, 'utf8'); // eslint-disable-line no-await-in-loop

	console.info(`✅ ${apiPath.replace(rootPath, '')}/src/actions/${actionPath}`);
}

// index.js の生成（カテゴリ）

console.info('\nGenerating index files...\n');

await Promise.all(['auth', 'unauth'].map(async authority => {
	const dirrents = await fs.readdir(`${sdkApiPath}/${authority}`, {
		withFileTypes: true,
		recursive: false,
	});
	const actionFileNames = dirrents
		.filter(dirent => dirent.isFile() && dirent.name.endsWith('.js') && dirent.name !== 'index.js')
		.map(({name}) => name);
	const code = [
		notice + '\n',
		...actionFileNames
			.map(fileName => `export * from './${fileName}';`),
	]
		.join('\n') + '\n';
	await fs.writeFile(`${sdkApiPath}/${authority}/index.js`, code, 'utf8');

	console.info(`✅ ${sdkApiPath.replace(rootPath, '')}/${authority}/index.js`);
}));

// index.js の生成（エントリーポイント）

const indexCode = [
	notice + '\n',
	...['auth', 'unauth']
		.map(authority => `export * from './${authority}/index.js';`),
]
	.join('\n') + '\n';
await fs.writeFile(`${sdkApiPath}/index.js`, indexCode, 'utf8');

console.info(`✅ ${sdkApiPath.replace(rootPath, '')}/index.js`);
